Bullet Collision Detection and Physics Library

See also http://bulletphysics.org/mediawiki-1.5.8/index.php/Creating_a_project_from_scratch

** Windows Compilation **

	Open the Microsoft Visual Studio solution in msvc/20xx/BULLET_PHYSICS.sln

Alternatively, use CMake to autogenerate a build system for Windows:
	
	- Download/install CMake from www.cmake.org or package manager
	- Use cmake-gui or
	- List available build systems by running 'cmake' in the Bullet root folder
	- Use cmake-gui 
	- Create a build system using the -G option for example:
	
	cmake . -G "Visual Studio 9 2008" or
	cmake . -G "Visual Studio 9 2008 Win64"


** Linux Compilation **

  - Download/install CMake from www.cmake.org or package manager
    CMake is like autoconf in that it will create build scripts which are then 
    used for the actual compilation

	- List available build systems by running 'cmake' in the Bullet root folder
	- Create a build system using the -G option for example:

	cmake . -G "Unix Makefiles"

  - There are some options for cmake builds:
      BUILD_SHARED_LIBS: default 'OFF', set to 'ON' to build .so libraries
      BUILD_EXTRAS: default 'ON', compiles additional libraries in 'Extras'
      BUILD_DEMOS: default 'ON', compiles applications found in 'Demos'
      CMAKE_INSTALL_PREFIX: default '/usr/local', the installation path.
      CMAKE_INSTALL_RPATH: if you install outside a standard ld search path,
        then you should set this to the installation lib path.
      CMAKE_BUILD_TYPE: default 'Release', can include debug symbols with
        either 'Debug' or 'RelWithDebInfo'.
    Other options may be discovered by 'cmake --help-variable-list' and
    'cmake --help-variable OPTION'

  - Run 'cmake' with desired options of the form -DOPTION=VALUE
    By default this will create the usual Makefile build system, but CMake can 
    also produce Eclipse or KDevelop project files.  See 'cmake --help' to see 
    what "generators" are available in your environment, selected via '-G'.
        For example:
        cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=RelWithDebugInfo

  - Assuming using the default Makefile output from cmake, run 'make' to 
    build, and then 'make install' if you wish to install.


** Mac OS X Compilation **

  - Download/install CMake from www.cmake.org or package manager
    CMake is like autoconf in that it will create build scripts which are then 
    used for the actual compilation

	- List available build systems by running 'cmake' in the Bullet root folder
	- Create a build system using the -G option for example:

  cmake . -G Xcode
  cmake . -G "Unix Makefiles"

  - There are some options for cmake builds:
      BUILD_SHARED_LIBS: default 'OFF', set to 'ON' to build .dylib libraries
      BUILD_EXTRAS: default 'ON', compiles additional libraries in 'Extras'
      BUILD_DEMOS: default 'ON', compiles applications found in 'Demos'
      CMAKE_INSTALL_PREFIX: default '/usr/local', the installation path.
      CMAKE_INSTALL_NAME_DIR: if you install outside a standard ld search 
        path, then you should set this to the installation lib/framework path. 
      CMAKE_OSX_ARCHITECTURES: defaults to the native architecture, but can be
        set to a semicolon separated list for fat binaries, e.g. ppc;i386;x86_64
      CMAKE_BUILD_TYPE: default 'Release', can include debug symbols with
        either 'Debug' or 'RelWithDebInfo'.

    To build framework bundles:
      FRAMEWORK: default 'OFF', also requires 'BUILD_SHARED_LIBS' set ON
        If both FRAMEWORK and BUILD_SHARED_LIBS are set, will create
        OS X style Framework Bundles which can be placed in 
        linked via the -framework gcc argument or drag into Xcode projects.
    (If not framework, then UNIX style 'include' and 'lib' will be produced)
      
    Other options may be discovered by 'cmake --help-variable-list' and
    'cmake --help-variable OPTION'

  - Run 'cmake' with desired options of the form -DOPTION=VALUE
    By default this will create the usual Makefile build system, but CMake can 
    also produce Eclipse or KDevelop project files.  See 'cmake --help' to see 
    what "generators" are available in your environment, selected via '-G'.
        For example:
        cmake -DBUILD_SHARED_LIBS=ON -DFRAMEWORK=ON \
              -DCMAKE_INSTALL_PREFIX=/Library/Frameworks \
              -DCMAKE_INSTALL_NAME_DIR=/Library/Frameworks \
              -DCMAKE_OSX_ARCHITECTURES='ppc;i386;x86_64' \
              -DCMAKE_BUILD_TYPE=RelWithDebugInfo

  - Assuming using the default Makefile output from cmake, run 'make' to build 
    and then 'make install'.


** Alternative Mac OS X and Linux via autoconf/make **
  - at the command line:
    ./autogen.sh
    ./configure
    make

** BlackBerry (QNX-based) Command-line Compilation **

  - To build for the QNX platform  run cmd.exe and execute the following commands:
    > cd [bbndk]				where [bbndk] is where the QNX NDK was installed (i.e. C:\bbndk)
    > bbndk-env.bat             on windows or bbndk-env.sh on MacOSX or Linux.
    > cd [bullet]/qnx			where [bullet] is the directory where Bullet was extracted to
    > make
    
    The BulletCollision, BulletDynamics, BulletSoftBody, LinearMath sources are combined
    and built into a single library. Following this, the relevant binaries should reside 
    in the following subdirectories:

libBullet: 
        [bullet]/qnx/Bullet/arm/a.le.v7      (ARM release)
        [bullet]/qnx/Bullet/arm/a.le.v7.g    (ARM debug)
        [bullet]/qnx/Bullet/x86/a            (x86 simulator release)
        [bullet]/qnx/Bullet/x86/a.g          (x86 simulator debug)

        
** BlackBerry (QNX-based) Momentics IDE **

To build for BlackBerry (QNX-based) platform from Momentics IDE:
- Right click on Project Explorer->Import.
- Select "Existing Existing Project into Workspace"->Next
- Select "Select root directory:" as [bullet] 
- Check the "Bullet" project (without copying project option). Then click Finish.
- Right click the "Bullet" project then Build.
To optionally build Bullet Demos:
- Select "Select root directory:" as [bullet]/Demos 
- Check all the projects (without copying project option). Then click Finish.
- Right click each and then Build and Run.




** For more help, visit http://www.bulletphysics.org **
