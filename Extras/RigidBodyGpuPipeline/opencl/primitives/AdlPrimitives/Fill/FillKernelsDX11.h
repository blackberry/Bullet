static const char* fillKernelsDX11= \
"/*\n"
"		2011 Takahiro Harada\n"
"*/\n"
"\n"
"typedef uint u32;\n"
"\n"
"#define GET_GROUP_IDX groupIdx.x\n"
"#define GET_LOCAL_IDX localIdx.x\n"
"#define GET_GLOBAL_IDX globalIdx.x\n"
"#define GROUP_LDS_BARRIER GroupMemoryBarrierWithGroupSync()\n"
"#define GROUP_MEM_FENCE\n"
"#define DEFAULT_ARGS uint3 globalIdx : SV_DispatchThreadID, uint3 localIdx : SV_GroupThreadID, uint3 groupIdx : SV_GroupID\n"
"#define AtomInc(x) InterlockedAdd(x, 1)\n"
"#define AtomInc1(x, out) InterlockedAdd(x, 1, out)\n"
"\n"
"#define make_uint4 uint4\n"
"#define make_uint2 uint2\n"
"#define make_int2 int2\n"
"\n"
"\n"
"cbuffer CB : register( b0 )\n"
"{\n"
"	int4 m_data;\n"
"	int m_offset;\n"
"	int m_n;\n"
"	int m_padding[2];\n"
"};\n"
"\n"
"\n"
"RWStructuredBuffer<int> dstInt : register( u0 );\n"
"\n"
"[numthreads(64, 1, 1)]\n"
"void FillIntKernel( DEFAULT_ARGS )\n"
"{\n"
"	int gIdx = GET_GLOBAL_IDX;\n"
"\n"
"	if( gIdx < m_n )\n"
"	{\n"
"		dstInt[ m_offset+gIdx ] = m_data.x;\n"
"	}\n"
"}\n"
"\n"
"RWStructuredBuffer<int2> dstInt2 : register( u0 );\n"
"\n"
"[numthreads(64, 1, 1)]\n"
"void FillInt2Kernel( DEFAULT_ARGS )\n"
"{\n"
"	int gIdx = GET_GLOBAL_IDX;\n"
"\n"
"	if( gIdx < m_n )\n"
"	{\n"
"		dstInt2[ m_offset+gIdx ] = make_int2( m_data.x, m_data.y );\n"
"	}\n"
"}\n"
"\n"
"RWStructuredBuffer<int4> dstInt4 : register( u0 );\n"
"\n"
"[numthreads(64, 1, 1)]\n"
"void FillInt4Kernel( DEFAULT_ARGS )\n"
"{\n"
"	int gIdx = GET_GLOBAL_IDX;\n"
"\n"
"	if( gIdx < m_n )\n"
"	{\n"
"		dstInt4[ m_offset+gIdx ] = m_data;\n"
"	}\n"
"}\n"
;
